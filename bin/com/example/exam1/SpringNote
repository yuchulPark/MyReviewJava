/*

DI - 의존성 주입
   - 자바로 만들어진 소프트웨어 속을 들여다보면 수많은 클래스로 구성되어 있음. 이 클래스들은 서로 관계에 있는데 그 중 Has a 관계는 어떤 클래스가
 	  다른 클래스의 맴버변수가 되는 것을 말함
   - ex. class A {
   		 	B ob;
   		 }
		 B클래스의 변수 ob는 A클래스의 맴버입니다. 이것을 Has a 관계라고 표현
		 B클래스 입장에서 A클래스를 사용하려면 코드 어딘가에 ob = new B()라고 객체를 생성하는 문장이 있어야함
		  그러나 만약 우리의 고객이 A의 맴버 B를 B말고 다른 것(C)로 변경해 달라는 요청이 들어왔다고 가정.
		 new B()라고 되어있는 코드를 찾아서 new C()로 직접 고쳐야 함
		  그런데 B가 사용한 곳이 A 한군데만 있는게 아니라 여러곳에서 사용되었다면 일일이 관련 코드를 찾아 바꾸기란 어렵고, 미쳐 못 바꾼 부분이 있을수도 있음
		  이와 같이 코드 내에 직접 new B()라고 되어있는 부분을 "강한 의존관계"에 있다라고 말함
		  우리는 사용자의 빈번한 수정에 대한 요구에 유연하게 대처하기 위하여 스프링 환경설정에 의하여 "느슨한 의존관계" or "의존관계 자동설정"을 이용하려고 함
		  즉, 스프링 환경설정 파일(XML, 어노테이션)에 의하여 어플리케이션에서 필요한 객체를 제공하여 의존관계를 설정하려고 함
		  이렇게 하면 사용자의 빈번한 수정이 있다고 하더라도 일일이 찾아다니면서 코드를 수정해야하는 번거로움을 줄일 수 있음
		  환경설정 파일만 수정해주면 됨
   - 스프링 환경이 객체를 제공해줌 -> 의존관계를 자동으로 설정

Spring MVC의 주요 구성 요소
- DispatcherServlet - 클라이언트의 요청을 전달받아 Controller에게 클라이언트의 요청을 전달하고, 
					  Controller가 return한 결과 값을 View에 전달하여 알맞은 응답을 생성하도록 함
- HandlerMapping - 클라이언트의 요청 URL을 어떤 Controller가 처리할 지 결정
- Controller - 클라이언트의 요청을 처리한 뒤, 그 결과를 DispatcherServlet에게 알려준다.
			 - 스트럿츠의 Action과 동일한 역할을 수행
- ModelAndView - Controller가 처리한 결과 정보 및 View 선택에 필요한 정보를 담는다.
- ViewResolver - Controller의 처리 결과를 생성할 View를 결정
- View - Controller의 처리 결과 화면을 생성

AOP 용어
- Advice - 공통 관심 사항을 뽑아서 만들어진 객체
... (후에 적기)

스케줄링, 배치 프로그램 - 화면 없이 지정된 기간이나 특정한 시간에 일괄처리를 위한 작업

트랜잭션 - 데이터베이스에서 어떤 일처리를 위한 여러개의 sql이 모아진 하나의 작업 단위
	  - 서로 관연있는 하나의 일처리를 위한 여러개의 sql을 하나의 "거래"로 바라봄
	  - ex. 한번에 여러 상품을 주문 -> A회원이 향수1개, 바디로션1개를 9시49분에 주문 
	  		-> 일처리를 위해서는 2개의 sql문이 모두 동작해야 함. 이와같이 어떤 하나의 일처리, 여기서는 "주문"이라는 요청에 의해 
	  		       여러개의 sql이 모두 동작해야 함. 이 중 하나라도 실패하면 모두 취소되어야 할 것임 
	  		-> 이러한 논리적인 작업단위를 트랜잭션
	  - 승인 - commit()
	         취소 - rollback()
	  - ex. 계좌이체의 경우 A계좌에서 B에게 100원을 이체하는 경우 2개의 sql이 모아져서 하나의 단위로 처리되어야 함
	  		-> 즉, A계좌에서 100원이 빠지는 sql과 B계좌에서 100원이 증가하는 sql이 모두 성공했을 때, 트랜잭션을 승인, 그렇지 않으면 모든 작업을 취소







*/